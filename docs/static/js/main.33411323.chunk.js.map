{"version":3,"sources":["index.js"],"names":["Word","source","target","checked","this","WordCard","props","state","wordIdxs","getWordIdxs","words","isOpen","console","log","forEach","word","wordIdx","push","array","newArray","currentIndex","length","randomIndex","Math","floor","random","shuffle","setState","e","checkWord","newWordIdxs","shift","container","spacing","alignItems","item","xs","textAlign","color","onChange","handleChecked","variant","size","onClick","goNext","mb","reset","React","Component","WordListInput","defaultInput","input","key","value","label","handleInput","fullWidth","inputProps","min","style","disabled","addWord","clearInput","WordListItem","deleteWord","WordList","map","Header","square","pageId","indicatorColor","textColor","newValue","switchPage","centered","App","defaultWords","slice","body","maxWidth","ml","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33411323.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Container } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport { IconButton } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport { Tabs, Tab } from '@material-ui/core';\nimport { List, ListItem } from '@material-ui/core';\nimport { Checkbox } from '@material-ui/core';\nimport { Box } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\n\n\nfunction shuffle(array) {\n// function getPermutation(length) {\n  // const array = [...Array(length).keys()];\n  // Fisher-Yates algorithm\n  const newArray = [...array];\n  var currentIndex = array.length;\n  while (0 !== currentIndex) {\n    const randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    [newArray[currentIndex], newArray[randomIndex]] = [newArray[randomIndex], newArray[currentIndex]];\n  }\n  return newArray;\n}\n\n\nclass Word {\n  constructor(source, target, checked = false) {\n    this.source = source;\n    this.target = target;\n    this.checked = checked;\n  }\n}\n\n\nclass WordCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordIdxs: this.getWordIdxs(this.props.words),\n      isOpen: false,\n      // checked: false,\n    };\n    console.log(\"construct WordCard\");\n  }\n\n  getWordIdxs(words) {\n    let wordIdxs = [];\n    words.forEach((word, wordIdx) => {\n      if (!word.checked) {\n        wordIdxs.push(wordIdx);\n      }\n    });\n    return shuffle(wordIdxs);\n  }\n\n  reset() {\n    this.setState({\n      wordIdxs: this.getWordIdxs(this.props.words),\n      isOpen: false,\n    });\n    console.log(\"reset WordCard\");\n  }\n\n  handleChecked(e) {\n    const wordIdx = this.state.wordIdxs[0];\n    this.props.checkWord(wordIdx);\n  }\n  \n  goNext() {\n    const isOpen = this.state.isOpen;\n    const newWordIdxs = [...this.state.wordIdxs];\n    if (isOpen) {\n      newWordIdxs.shift()  // pop first\n    }\n    this.setState({\n      wordIdxs: newWordIdxs,\n      isOpen: !isOpen,\n    });\n  }\n\n  render() {\n    if (this.state.wordIdxs.length > 0) {\n      const wordIdx = this.state.wordIdxs[0];\n      const word = this.props.words[wordIdx];\n      const isOpen = this.state.isOpen;\n      console.log(\"render WordCard\", wordIdx, word, this.state.wordIdxs, this.props.words);\n      return (\n        <Grid container spacing={3} alignItems=\"center\">\n          <Grid item xs={4}>\n            <Box textAlign=\"center\">\n              {word.source}\n            </Box>\n          </Grid>\n          <Grid item xs={5}>\n            <Box textAlign=\"center\">\n              {isOpen ? word.target : \"\"}\n            </Box>\n          </Grid>\n          <Grid item xs={3}>\n            <Checkbox\n              color=\"primary\"\n              checked={word.checked}\n              onChange={(e) => this.handleChecked(e)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Box textAlign=\"center\">\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"large\"\n                onClick={() => this.goNext()}\n              >\n                {isOpen ? \"Next\" : \"Open\"}\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return (\n        <>\n          <Box textAlign=\"center\" mb={5}>\n            Finish!\n          </Box>\n          <Box textAlign=\"center\">\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            size=\"large\"\n            onClick={() => this.reset()}>\n            Start Again\n          </Button>\n          </Box>\n        </>\n      )\n    }\n  }\n}\n\nclass WordListInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultInput = {\n      source: \"\",\n      target: \"\",\n    };\n    this.state = {\n      input: {...this.defaultInput}\n    };\n  }\n\n  handleInput(e, key) {\n    const input = this.state.input;\n    input[key] = e.target.value;\n    this.setState({\n      input: input\n    });\n  }\n\n  clearInput() {\n    this.setState({\n      input: {...this.defaultInput}\n    });\n  }\n\n  render() {\n    const input = this.state.input;\n    return (\n      <Box mb={3}>\n        <Grid container spacing={3} alignItems=\"center\">\n          <Grid item xs={4}>\n            <TextField\n              // type=\"text\"\n              value={input.source}\n              label=\"Source\"\n              onChange={(e) => this.handleInput(e, \"source\")}\n              fullWidth\n              inputProps={{min: 0, style: { textAlign: 'center' }}}\n            />\n          </Grid>\n          <Grid item xs={5}>\n            <TextField\n              // type=\"text\"\n              value={input.target}\n              label=\"Target\"\n              onChange={(e) => this.handleInput(e, \"target\")}\n              fullWidth\n              inputProps={{min: 0, style: { textAlign: 'center' }}}\n            />\n          </Grid>\n          <Grid item xs={2}>\n            <Box textAlign=\"center\">\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                disabled={!input.source || !input.target}\n                onClick={() => {\n                  this.props.addWord(input.source, input.target);\n                  this.clearInput();\n                }}\n              >\n                Add\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n}\n\nfunction WordListItem(props) {\n  return (\n    <ListItem>\n      <Grid container spacing={3} alignItems=\"center\">\n        <Grid item xs={4}>\n          <Box textAlign=\"center\">\n            {props.word.source}\n          </Box>\n        </Grid>\n        <Grid item xs={5}>\n          <Box textAlign=\"center\">\n            {props.word.target}\n          </Box>\n        </Grid>\n        <Grid item xs={1}>\n          <Box textAlign=\"center\">\n            <Checkbox\n              checked={props.word.checked}\n              color=\"primary\"\n              onChange={() => props.checkWord()}\n            />\n          </Box>\n        </Grid>\n        <Grid item xs={2}>\n          <Box textAlign=\"center\">\n            <IconButton onClick={() => props.deleteWord()}>\n              <DeleteIcon color=\"secondary\" />\n            </IconButton>\n          </Box>\n        </Grid>\n      </Grid>      \n    </ListItem>\n  );\n}\n\nclass WordList extends React.Component {\n  render() {\n    const words = this.props.words;\n    return (\n      <>\n        <WordListInput\n          key=\"input\"\n          addWord={(source, target) => this.props.addWord(source, target)}\n        />\n        <List>\n          {words.map((word, wordIdx) =>\n            <WordListItem\n              key={wordIdx}\n              word={word}\n              wordIdx={wordIdx}\n              checkWord={() => this.props.checkWord(wordIdx)}\n              deleteWord={() => this.props.deleteWord(wordIdx)}\n            />\n          )}\n        </List>\n      </>\n    );\n  }\n}\n\nfunction Header(props) {\n  return (\n    <Box mb={5}>\n      <Paper square>\n        <Tabs\n          value={props.pageId}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          onChange={(e, newValue) => props.switchPage(newValue)}\n          centered\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"List\" value=\"list\" />\n          <Tab label=\"Card\" value=\"card\" />\n        </Tabs>\n      </Paper>\n    </Box>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const defaultWords = [\n      new Word(\"apple\", \"りんご\"),\n      new Word(\"pencil\", \"鉛筆\"),\n      new Word(\"clock\", \"時計\"),\n    ];\n    this.state = {\n      words: defaultWords,\n      pageId: \"list\",\n    };\n  }\n\n  checkWord(wordIdx) {\n    console.log(\"check word\", wordIdx, this.state.words.length);\n    const words = this.state.words;\n    const word = words[wordIdx];\n    word.checked = !word.checked;\n    this.setState({\n      words: [\n        ...words.slice(0, wordIdx),\n        word,\n        ...words.slice(wordIdx+1),\n      ]\n    });\n  }\n\n  addWord(source, target) {\n    const words = this.state.words;\n    const word = new Word(source, target);\n    this.setState({\n      words: [...words, word]\n    });\n  }\n  \n  deleteWord(wordIdx) {\n    const words = this.state.words;\n    this.setState({\n      words: [...words.slice(0, wordIdx), ...words.slice(wordIdx+1)]\n    });\n  }\n\n  switchPage(pageId) {\n    this.setState({\n      pageId: pageId,\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    console.log(\"render App\");\n    const pageId = this.state.pageId;\n    let body;\n    if (pageId === \"list\") {\n      body = <WordList\n        words={this.state.words}\n        checkWord={(wordIdx) => this.checkWord(wordIdx)}\n        addWord={(source, target) => this.addWord(source, target)}\n        deleteWord={(wordIdx) => this.deleteWord(wordIdx)}\n      />\n    } else {\n      body = <WordCard\n        words={this.state.words}\n        checkWord={(wordIdx) => this.checkWord(wordIdx)}\n      />\n    }\n    return (\n      <Container maxWidth=\"md\">\n        <Header\n          switchPage={(pageId) => this.switchPage(pageId)}\n          pageId={pageId}\n        />\n        <Box ml={5}>\n          {body}\n        </Box>\n      </Container>\n    );\n  }\n}\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}